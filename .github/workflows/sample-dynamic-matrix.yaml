name: Sample Dynamic Matrix

on:
  release:
    types: [published]
  push:
    branches:
      - main
    tags:
      - staging.*
      - production.*

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      MATRIX: ${{ steps.set-matrix.outputs.MATRIX }}
    steps:
      - uses: actions/checkout@v2

      - id: set-matrix
        name: Generate Matrix
        run: |
          git fetch

          export SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-7)
          export SET_RELEASE=$(git describe --tags --always ${GITHUB_SHA})
          export STAGING_TAG=$(echo "$GITHUB_REF" | grep -P "refs/tags/staging\.\\d+")
          export PRODUCTION_TAG=$(echo "$GITHUB_REF" | grep -P "refs/tags/production\.\\d+")

          echo "Release: $SET_RELEASE"
          echo "Production: $PRODUCTION_TAG"
          echo "Staging: $STAGING_TAG"
          echo "Hash: $SHORT_SHA"

          if [ ! -z "$PRODUCTION_TAG" -a "$PRODUCTION_TAG" != "" ]; then
            # matching tag pattern 'production.[0-9]'

            echo "Production..."

            export MATRIX="{\"include\":[
                {
                  \"id\":\"PRODUCTION\",
                  \"tag\":\"$SHORT_SHA\",
                  \"release\":\"$SET_RELEASE\"
                }
            ]}"
          elif [ ! -z "$STAGING_TAG" -a "$STAGING_TAG" != "" ]; then
            # matching tag pattern 'staging.[0-9]'

            echo "Staging..."

            export MATRIX="{\"include\":[
                {
                  \"id\":\"STAGING\",
                  \"tag\":\"$SHORT_SHA\",
                  \"release\":\"$SET_RELEASE\"
                }
            ]}"
          else
            # matching deploy development

            echo "Development..."

            export MATRIX="{\"include\":[
                {
                  \"id\":\"DEVELOPMENT\",
                  \"tag\":\"$SHORT_SHA\",
                  \"release\":\"\"
                }
            ]}"
          fi

          echo "::set-output name=MATRIX::$(echo $MATRIX)"

  build:
    runs-on: ubuntu-latest
    needs: matrix
    strategy:
      matrix: ${{fromJson(needs.matrix.outputs.matrix)}}
    timeout-minutes: 8
    steps:
    - run: |
        echo ${{ MATRIX.namespace }}
        echo ${{ MATRIX.tag }}

    - name: Set Suffix
      run: echo SUFFIX=$(echo "${{ MATRIX.namespace }}" | tr 'a-z' 'A-Z') >> $GITHUB_ENV

    - name: Set environment variables dynamically
      run: |
        echo IMAGE_REGISTRY_PATH=${{ env[format('IMAGE_{0}', env.SUFFIX)] }} >> $GITHUB_ENV
        
  deploy:
    needs: [matrix, build]
    timeout-minutes: 2
    runs-on: ubuntu-20.04
    strategy:
      matrix: ${{fromJson(needs.matrix.outputs.matrix)}}      
    steps:
      - name: Check out source code
        uses: actions/checkout@v2
              
      - name: Decrypt ENV file
        id: env
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="${{ env.LARGE_SECRET_PASSPHRASE }}" --output ./.env ./deployment/encrypted/${{ env.ENV_FILE_NAME }}
      
      - name: Push Notification To The Mattermost
        run: |
          WORKFLOW_NAME=$GITHUB_WORKFLOW
          COMMIT_URL=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$GITHUB_SHA
          NAMESPACE=${{ MATRIX.id }}

          export NOTIFICATION_MSG=$(printf '{"text": "> **Deployed** :loudspeaker: &#10;**Service:** %s&#10;**Env:** %s&#10;**Commit:** %s"}' "$WORKFLOW_NAME" "$NAMESPACE" "$COMMIT_URL")
          curl -i -X POST -H "Content-Type: application/json" -d "$(echo $NOTIFICATION_MSG)" ${{ secrets.MATTERMOST_WEBHOOK_URL }}        
